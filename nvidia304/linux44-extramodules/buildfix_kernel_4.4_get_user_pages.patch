From 8f65eef19c0b6c0033f7fe5eb941e3134ce6683b Mon Sep 17 00:00:00 2001
From: Alberto Milone <alberto.milone@canonical.com>
Date: Fri, 1 Mar 2019 12:35:07 +0100
Subject: [PATCH 1/1] Add support for new 7 argument get_user_pages

---
 Makefile.kbuild |   1 +
 Makefile.nvidia |   1 +
 conftest.sh     | 134 +++++++++++++++++++++++++++++++++++++++++++-----
 nv-linux.h      |  90 ++++++++++++++++++++++++--------
 4 files changed, 192 insertions(+), 34 deletions(-)

diff --git a/Makefile.kbuild b/Makefile.kbuild
index bd81f84..618c2b5 100644
--- a/Makefile.kbuild
+++ b/Makefile.kbuild
@@ -188,6 +188,7 @@ COMPILE_TESTS = \
 	write_cr4 \
 	for_each_online_node \
 	node_end_pfn \
+	get_user_pages \
 	get_user_pages_remote \
 	arch_phys_wc_add
 
diff --git a/Makefile.nvidia b/Makefile.nvidia
index d18fcc0..be68190 100644
--- a/Makefile.nvidia
+++ b/Makefile.nvidia
@@ -63,6 +63,7 @@ COMPILE_TESTS = \
 	file_operations \
 	pci_get_domain_bus_and_slot \
 	write_cr4 \
+	get_user_pages \
 	get_user_pages_remote \
 	arch_phys_wc_add
 
diff --git a/conftest.sh b/conftest.sh
index 181ebca..c22108a 100755
--- a/conftest.sh
+++ b/conftest.sh
@@ -1525,6 +1525,110 @@ compile_test() {
 
             compile_check_conftest "$CODE" "NV_NODE_END_PFN_PRESENT" "" "functions"
         ;;
+
+        get_user_pages)
+            #
+            # Conftest for get_user_pages()
+            #
+            # Use long type for get_user_pages and unsigned long for nr_pages
+            # 2013 Feb 22: 28a35716d317980ae9bc2ff2f84c33a3cda9e884
+            #
+            # Removed struct task_struct *tsk & struct mm_struct *mm from get_user_pages.
+            # 2016 Feb 12: cde70140fed8429acf7a14e2e2cbd3e329036653
+            #
+            # Replaced get_user_pages6 with get_user_pages.
+            # 2016 April 4: c12d2da56d0e07d230968ee2305aaa86b93a6832
+            #
+            # Replaced write and force parameters with gup_flags.
+            # 2016 Oct 12: 768ae309a96103ed02eb1e111e838c87854d8b51
+            #
+            # linux-4.4.168 cherry-picked commit 768ae309a961 without
+            # c12d2da56d0e which is covered in Conftest #3.
+            #
+            # Conftest #1: Check if get_user_pages accepts 6 arguments.
+            # Return if true.
+            # Fall through to conftest #2 on failure.
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/mm.h>
+            long get_user_pages(unsigned long start,
+                                unsigned long nr_pages,
+                                int write,
+                                int force,
+                                struct page **pages,
+                                struct vm_area_struct **vmas) {
+                return 0;
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+            if [ -f conftest$$.o ]; then
+                echo "#define NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+                echo "#undef NV_GET_USER_PAGES_HAS_TASK_STRUCT" | append_conftest "functions"
+                rm -f conftest$$.o
+                return
+            fi
+
+            # Conftest #2: Check if get_user_pages has gup_flags instead of
+            # write and force parameters. And that gup doesn't accept a
+            # task_struct and mm_struct as its first arguments.
+            # Return if available.
+            # Fall through to conftest #3 on failure.
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/mm.h>
+            long get_user_pages(unsigned long start,
+                                unsigned long nr_pages,
+                                unsigned int gup_flags,
+                                struct page **pages,
+                                struct vm_area_struct **vmas) {
+                return 0;
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                echo "#undef NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+                echo "#undef NV_GET_USER_PAGES_HAS_TASK_STRUCT" | append_conftest "functions"
+                rm -f conftest$$.o
+                return
+            fi
+
+            # Conftest #3: Check if get_user_pages has gup_flags instead of
+            # write and force parameters AND that gup has task_struct and
+            # mm_struct as its first arguments.
+            # Return if available.
+            # Fall through to default case if absent.
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/mm.h>
+            long get_user_pages(struct task_struct *tsk,
+                                struct mm_struct *mm,
+                                unsigned long start,
+                                unsigned long nr_pages,
+                                unsigned int gup_flags,
+                                struct page **pages,
+                                struct vm_area_struct **vmas) {
+                return 0;
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                echo "#undef NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+                echo "#define NV_GET_USER_PAGES_HAS_TASK_STRUCT" | append_conftest "functions"
+                rm -f conftest$$.o
+                return
+            fi
+
+            echo "#define NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+            echo "#define NV_GET_USER_PAGES_HAS_TASK_STRUCT" | append_conftest "functions"
+
+            return
+        ;;
+
         get_user_pages_remote)
             #
             # Determine if the function get_user_pages_remote() is
@@ -1535,8 +1639,8 @@ compile_test() {
             #
             # get_user_pages[_remote]() write/force parameters
             # replaced with gup_flags:
-            #   2016 Oct 13: 768ae309a96103ed02eb1e111e838c87854d8b51
-            #   2016 Oct 13: 9beae1ea89305a9667ceaab6d0bf46a045ad71e7
+            #   2016 Oct 12: 768ae309a96103ed02eb1e111e838c87854d8b51
+            #   2016 Oct 12: 9beae1ea89305a9667ceaab6d0bf46a045ad71e7
             #
             # get_user_pages_remote() added 'locked' parameter
             #   2016 Dec 14:5b56d49fc31dbb0487e14ead790fc81ca9fb2c99
@@ -1544,6 +1648,7 @@ compile_test() {
             # conftest #1: check if get_user_pages_remote() is available
             # return if not available.
             # Fall through to conftest #2 if it is present
+
             echo "$CONFTEST_PREAMBLE
             #include <linux/mm.h>
             int conftest_get_user_pages_remote(void) {
@@ -1555,24 +1660,26 @@ compile_test() {
 
             if [ -f conftest$$.o ]; then
                 echo "#undef NV_GET_USER_PAGES_REMOTE_PRESENT" | append_conftest "functions"
-                echo "#undef NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+                echo "#undef NV_GET_USER_PAGES_REMOTE_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
                 echo "#undef NV_GET_USER_PAGES_REMOTE_HAS_LOCKED_ARG" | append_conftest "functions"
                 rm -f conftest$$.o
                 return
             fi
 
-            # conftest #2: check if get_user_pages() has write and
+            # conftest #2: check if get_user_pages_remote() has write and
             # force arguments. Return if these arguments are present
             # Fall through to conftest #3 if these args are absent.
             echo "#define NV_GET_USER_PAGES_REMOTE_PRESENT" | append_conftest "functions"
             echo "$CONFTEST_PREAMBLE
             #include <linux/mm.h>
-            long get_user_pages(unsigned long start,
-                                unsigned long nr_pages,
-                                int write,
-                                int force,
-                                struct page **pages,
-                                struct vm_area_struct **vmas) {
+            long get_user_pages_remote(struct task_struct *tsk,
+                                       struct mm_struct *mm,
+                                       unsigned long start,
+                                       unsigned long nr_pages,
+                                       int write,
+                                       int force,
+                                       struct page **pages,
+                                       struct vm_area_struct **vmas) {
                 return 0;
             }" > conftest$$.c
 
@@ -1580,14 +1687,14 @@ compile_test() {
             rm -f conftest$$.c
 
             if [ -f conftest$$.o ]; then
-                echo "#define NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+                echo "#define NV_GET_USER_PAGES_REMOTE_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
                 echo "#undef NV_GET_USER_PAGES_REMOTE_HAS_LOCKED_ARG" | append_conftest "functions"
                 rm -f conftest$$.o
                 return
             fi
 
             # conftest #3: check if get_user_pages_remote() has locked argument
-            echo "#undef NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+
             echo "$CONFTEST_PREAMBLE
             #include <linux/mm.h>
             long get_user_pages_remote(struct task_struct *tsk,
@@ -1610,7 +1717,10 @@ compile_test() {
             else
                 echo "#undef NV_GET_USER_PAGES_REMOTE_HAS_LOCKED_ARG" | append_conftest "functions"
             fi
+            echo "#undef NV_GET_USER_PAGES_REMOTE_HAS_WRITE_AND_FORCE_ARGS" | append_conftest "functions"
+
         ;;
+
         arch_phys_wc_add)
             #
             # Determine if the arch_phys_wc_add() function is present.
diff --git a/nv-linux.h b/nv-linux.h
index b46e71f..9045718 100644
--- a/nv-linux.h
+++ b/nv-linux.h
@@ -1827,31 +1827,53 @@ static inline NvU64 nv_node_end_pfn(int nid)
 }
 #endif /* defined(NV_GET_NUM_PHYSPAGES_PRESENT) */
 
-/*  get_user_pages_remote() was added by:
- *    2016 Feb 12: 1e9877902dc7e11d2be038371c6fbf2dfcd469d7
+/* get_user_pages
  *
- *  The very next commit (cde70140fed8429acf7a14e2e2cbd3e329036653)
- *  deprecated the 8-argument version of get_user_pages for the
- *  non-remote case (calling get_user_pages with current and current->mm).
+ * The 8-argument version of get_user_pages was deprecated by commit 
+ * (2016 Feb 12: cde70140fed8429acf7a14e2e2cbd3e329036653)for the non-remote case 
+ * (calling get_user_pages with current and current->mm).
  *
- *  The guidelines are: call NV_GET_USER_PAGES_REMOTE if you need the 8-argument
- *  version that uses something other than current and current->mm. Use
- *  NV_GET_USER_PAGES if you are refering to current and current->mm.
+ * Completely moved to the 6 argument version of get_user_pages -
+ * 2016 Apr 4: c12d2da56d0e07d230968ee2305aaa86b93a6832
  *
- *  Note that get_user_pages_remote() requires the caller to hold a reference on
- *  the task_struct (if non-NULL) and the mm_struct. This will always be true
- *  when using current and current->mm. If the kernel passes the driver a vma
- *  via driver callback, the kernel holds a reference on vma->vm_mm over that
- *  callback.
+ * write and force parameters were replaced with gup_flags by - 
+ * 2016 Oct 12: 768ae309a96103ed02eb1e111e838c87854d8b51
+ *
+ * A 7-argument version of get_user_pages was introduced into linux-4.4.y by
+ * commit 8e50b8b07f462ab4b91bc1491b1c91bd75e4ad40 which cherry-picked the
+ * replacement of the write and force parameters with gup_flags
  *
- *  get_user_pages_remote() added 'locked' parameter
- *    2016 Dec 14:5b56d49fc31dbb0487e14ead790fc81ca9fb2c99
  */
 
-#if defined(NV_GET_USER_PAGES_REMOTE_PRESENT)
+#if defined(NV_GET_USER_PAGES_HAS_TASK_STRUCT)
     #if defined(NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS)
-        #define NV_GET_USER_PAGES           get_user_pages
-        #define NV_GET_USER_PAGES_REMOTE    get_user_pages_remote
+        #define NV_GET_USER_PAGES(start, nr_pages, write, force, pages, vmas) \
+            get_user_pages(current, current->mm, start, nr_pages, write, force, pages, vmas)
+    #else
+        #include <linux/mm.h>
+        #include <linux/sched.h>
+
+        static inline long NV_GET_USER_PAGES(unsigned long start,
+                                             unsigned long nr_pages,
+                                             int write,
+                                             int force,
+                                             struct page **pages,
+                                             struct vm_area_struct **vmas)
+        {
+            unsigned int flags = 0;
+
+            if (write)
+                flags |= FOLL_WRITE;
+            if (force)
+                flags |= FOLL_FORCE;
+
+            return get_user_pages(current, current->mm, start, nr_pages, flags,
+                                  pages, vmas);
+        }
+    #endif
+#else
+    #if defined(NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS)
+        #define NV_GET_USER_PAGES get_user_pages
     #else
         #include <linux/mm.h>
 
@@ -1871,7 +1893,34 @@ static inline NvU64 nv_node_end_pfn(int nid)
 
             return get_user_pages(start, nr_pages, flags, pages, vmas);
         }
+    #endif
+#endif
 
+/*  get_user_pages_remote() was added by:
+ *    2016 Feb 12: 1e9877902dc7e11d2be038371c6fbf2dfcd469d7
+ *
+ *  The very next commit (cde70140fed8429acf7a14e2e2cbd3e329036653)
+ *  deprecated the 8-argument version of get_user_pages for the
+ *  non-remote case (calling get_user_pages with current and current->mm).
+ *
+ *  The guidelines are: call NV_GET_USER_PAGES_REMOTE if you need the 8-argument
+ *  version that uses something other than current and current->mm. Use
+ *  NV_GET_USER_PAGES if you are refering to current and current->mm.
+ *
+ *  Note that get_user_pages_remote() requires the caller to hold a reference on
+ *  the task_struct (if non-NULL) and the mm_struct. This will always be true
+ *  when using current and current->mm. If the kernel passes the driver a vma
+ *  via driver callback, the kernel holds a reference on vma->vm_mm over that
+ *  callback.
+ *
+ *  get_user_pages_remote() added 'locked' parameter
+ *    2016 Dec 14:5b56d49fc31dbb0487e14ead790fc81ca9fb2c99
+ */
+
+#if defined(NV_GET_USER_PAGES_REMOTE_PRESENT)
+    #if defined(NV_GET_USER_PAGES_REMOTE_HAS_WRITE_AND_FORCE_ARGS)
+        #define NV_GET_USER_PAGES_REMOTE    get_user_pages_remote
+    #else
         static inline long NV_GET_USER_PAGES_REMOTE(struct task_struct *tsk,
                                                     struct mm_struct *mm,
                                                     unsigned long start,
@@ -1903,10 +1952,7 @@ static inline NvU64 nv_node_end_pfn(int nid)
         }
     #endif
 #else
-    #define NV_GET_USER_PAGES(start, nr_pages, write, force, pages, vmas) \
-        get_user_pages(current, current->mm, start, nr_pages, write, force, pages, vmas)
-
-    #define NV_GET_USER_PAGES_REMOTE    get_user_pages
+    #define NV_GET_USER_PAGES_REMOTE    NV_GET_USER_PAGES
 #endif
 
 //
-- 
2.19.1
